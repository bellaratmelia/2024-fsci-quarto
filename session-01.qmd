---
title: "Getting Started with Quarto"
author: "Bella Ratmelia & Dong Danping"
format:
  revealjs: 
    theme: [default, custom.scss]
    width: 1920
    height: 1080
    slide-number: true
    footer: "[C03 Making Research More Transparent with Quarto and RStudio](https://bellaratmelia.github.io/2024-fsci-quarto/)"
    chalkboard: false
    logo: "images/smu logo.png"
    incremental: true
    multiplex: true
---

# Session 01 - Introduction to Quarto

Welcome!

## Welcome

Hello!

-   Let's get to know each other!

## About This Workshop

-   We assume that you have some basic knowledge of R, RStudio and probably a little bit of Markdown
-   [Workshop Website](https://bellaratmelia.github.io/2024-fsci-quarto/) (built with Quarto)
    -   Pre-workshop setup instructions
    -   Workshop materials
    -   Lesson objectives and lesson plan

::: aside
If you need more help, please let one of the instructors know.
:::

## Learning Objectives

By the end of the session, participants will be able to:

1.  Describe how Quarto can enhance transparency in scientific and technical publishing.

2.  Use RStudio to combine narrative text, R code, mathematical formulas, and citations within Quarto to produce polished and verifiable research documents.

3.  Publish Quarto documents into the following format: static HTML document, Word, PDF and RevealJS presentation to cater to different publication and presentation needs.

4.  Use Quarto Pub or GitHub Pages to create websites to communicate their research findings to a wider audience.

## Setup and instructions

1.  [Download](https://posit.co/download/rstudio-desktop/) and install the latest version of R
2.  [Download](https://posit.co/download/rstudio-desktop/) and install the latest version of RStudio
3.  [Download](https://quarto.org/docs/download/index.html) and install the latest version of Quarto
4.  Clone the GitHub repository from <link>
5.  Install these R packages (to be updated):

```{r}
#| eval: false
#| echo: TRUE
#| code-line-numbers: false
#| fragment: true

options(repos = c(CRAN = "https://cloud.r-project.org"))

pkg_list <- c( "tidyverse", "gt", "gtExtras", "reactable", "ggiraph", "here", "rmarkdown", "gtsummary", "fs", "skimr")

install.packages(pkg_list)
```

## Literate Programming

> "*Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a **computer** what to do, let us concentrate rather on explaining to **human** beings what we want a computer to do.*"
>
> -- Donald Knuth, 1984

Essentially, literate programming is about:

-   Creating code that is not only executable but also readable and understandable by humans

-   Weaving code and documentation in a **single document**, emphasizing human-readable explanation alongside executable code

## Example: eLife Reproducible Article

![](images\02_reproducible_elife.PNG)

## Example: eLife Reproducible Article

::: {layout-ncol="2"}
![A figure from the reproducible article](images\03a_elife_figure.PNG)

![The underlying live codes for the same figure](images\03b_elife_figure_code.PNG)
:::

## Research Transparency & Reproducibility

-   Enables researcher to provide clear, detailed descriptions of their methodologies, algorithms, and computational processes.

-   This integration ensures that the logic and rationale behind each part of the code are explicitly documented, making it easier for others to follow, reproduce, and validate the research.

-   Reduces ambiguities and potential misinterpretations, fostering a more robust and transparent scientific discourse.

In Quarto, this is enabled through code chunks - more details about this on the next session

::: notes
These are some speaker notes
:::

## A Quick Overview or Recap of R & R Studio

\[to add some screenshots/bullet points here\] If needed, do a 5 min intro to the R interface

## What is Quarto?

-   Quarto is an open-source scientific and technical publishing system

-   It is the next-generation of R Markdown

-   Supports multiple programming languages (R, Python, Julia)

-   Enables the creation of dynamic and reproducible documents, reports, presentations and websites

![](images/quarto%20universe.png)

::: notes
Our slides and workshop websites are all built with Quarto!
:::

## What does a Quarto document look like?

![](images/01_quarto_doc.png)

## What does a Quarto document look like?

A Quarto document (.qmd) is a plain text file that can be rendered to many different formats, e.g. html, PDF, .docx

![](images/01a%20penguins.png)

## Rendering to different formats

-   HTML reports and websites
-   PDF reports
-   MS Office Word
-   Presentations (revealjs, Powerpoint, Beamer)
-   Books

## What can you do with Quarto?

::: {layout-ncol="2"}
![Creating html for web publishing](images/04_website_html.PNG){fig-align="left" width="714"}

![Generating reports in PDF](images/04_PDF_report.png){fig-align="left" width="495"}
:::

## What can you do with Quarto?

![MS Word for office workflows](images/04_MS%20word.PNG){height="600"}

## What can you do with Quarto?

Or presentations, like the one you are looking at right now.

## What is YAML?

::: nonincremental
-   Quarto documents begin with **YAML** (**Y**AML **A**in't **M**arkup **L**anguage) headers
-   YAML specify document metadata and control settings which influences document rendering and final output in many different ways:
    -   Title, author, date
    -   Output format (HTML, PDF, Word, etc.)
    -   Table of contents settings
    -   Bibliography and citation style
    -   And more!
:::

## Markdown and R Markdown

-   **Markdown** is the underlying document syntax for Quarto and R Markdown

-   lightweight markup language, which uses plain text with simple syntax for easy text formatting

-   widely used for documentation, README files and web content

-   RMarkdown is an extension of Markdown, developed by RStudio, which allows embedding of R code chunks within Markdown documents

## Markdown Basics: Syntax

+-----------------------------------------+-----------------------------------------+
| Markdown Syntax                         | Output                                  |
+=========================================+=========================================+
| ``` markdown                            | *italics*, **bold**, ***bold italics*** |
| *italics*, **bold**, ***bold italics*** |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | superscript^2^ / subscript~2~           |
| superscript^2^ / subscript~2~           |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | ~~strikethrough~~                       |
| ~~strikethrough~~                       |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | `verbatim code`                         |
| `verbatim code`                         |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+

::: callout-tip
### Tip

To create a line break, you can use two spaces at the end of a line OR a backslash `\`.

To create a paragraph, type `Enter` twice.
:::

## Markdown Basics - Headings

+-----------------+-----------------------------------+
| Markdown Syntax | Output                            |
+=================+===================================+
| ```             | # Header 1 {.heading-output}      |
| # Header 1      |                                   |
| ```             |                                   |
+-----------------+-----------------------------------+
| ```             | ## Header 2 {.heading-output}     |
| ## Header 2     |                                   |
| ```             |                                   |
+-----------------+-----------------------------------+
| ```             | ### Header 3 {.heading-output}    |
| ### Header 3    |                                   |
| ```             |                                   |
+-----------------+-----------------------------------+
| ```             | #### Header 4 {.heading-output}   |
| #### Header 4   |                                   |
| ```             |                                   |
+-----------------+-----------------------------------+
| ```             | ##### Header 5 {.heading-output}  |
| ##### Header 5  |                                   |
| ```             |                                   |
+-----------------+-----------------------------------+
| ```             | ###### Header 6 {.heading-output} |
| ###### Header 6 |                                   |
| ```             |                                   |
+-----------------+-----------------------------------+

```{=html}
<style type="text/css">
.heading-output {
  border-bottom: none;
  margin-top: 0;
  margin-bottom: 0;
}
</style>
```
# Let's try this together!

Create your first Quarto document.

## Lists

::: panel-tabset
### Code {.smaller}

```         
**Unordered List**

-   item 1
    -   sub-item 1
    -   sub-item 2
        -   sub-sub-item 1

**Ordered List**

1.  item 1
2.  item 2
    i)  sub-item 1
        A.  sub-sub-item 1

**Checkbox**

-  [ ] Task 1 
-  [x] Task 2
```

### Output {.smaller}

::: nonincremental
**Unordered List**

-   item 1
    -   sub-item 1
    -   sub-item 2
        -   sub-sub-item 1

**Ordered List**

1.  item 1
2.  item 2
    i)  sub-item 1
        A.  sub-sub-item 1

**Checkbox**

-   [ ] Task 1
-   [x] Task 2
:::
:::

## Links

::: columns
::: {.column .fragment width="50%"}
**Markdown Syntax**

```         
<https://quarto.org>
```

```         
[Quarto](https://quarto.org)
```
:::

::: {.column .fragment width="50%"}
**Output**

<https://quarto.org>

[Quarto](https://quarto.org)
:::
:::

## Images from web

Images can be embedded using the following syntax: `![alt text](image url)`.

::: panel-tabset
### Code

```         
![Quarto Logo](https://quarto.org/quarto.png)
```

### Output

![Quarto Logo](https://quarto.org/quarto.png)
:::

## Images from local directory {.smaller}

::: panel-tabset
### Code

```         
![Elephant](images/elephant.png)
```

### Output

![Elephant](images/elephant.png){height="600"}
:::

# Let's try this together!

Adding lists, links and images to your Quarto document.

## Anatomy of a Quarto document

::: nonincremental
-   **Metadata (YAML)**

```         
---
format: html
---
```

-   **Code**

```{r}
#| eval: false
#| echo: true
library(dplyr)
mtcars %>% 
  group_by(cyl) %>%
  summarize(mean = mean(mpg), .groups = "drop")
```

-   **Text**

```         
## Heading 1
This is a sentence with some **bold text**.
```
:::

## More YAML

::: columns
::: {.column .nonincremental width="50%"}
```         
---
title: "My Document"
format: 
  html:
    toc: true
    code-fold: true
---
```
:::

::: {.column .nonincremental width="50%"}
**More Document Options in YAML:**

-   Table of Contents

-   Styling (making things pretty)

-   Code related settings

-   References & Citation
:::
:::

## Rendering

Besides rendering with the RStudio button, you may also render via:

-   Terminal or system shell:

```         
quarto render document.qmd # defaults to html
quarto render document.qmd --to pdf
quarto render document.qmd --to docx
```

-   R console using `quarto` R package

```         
library(quarto)
quarto_render("document.qmd") # defaults to html
quarto_render("document.qmd", output_format = "pdf")
```

# Let's try this together!

Add more YAML options and try other rendering methods.

## Figures

-   Figure settings
-   Figure layout

## Tables

## Cross References

## Call-out box

# Let's try this together!

Use the penguin document to figures, tables and cross references.
