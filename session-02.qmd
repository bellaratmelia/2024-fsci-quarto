---
title: "Scholarly Writing and Presentation"
author: "Bella Ratmelia & Dong Danping"
format: revealjs
bibliography: references.bib
suppress-bibliography: true
---

## Recap from yesterday

We covered the following topic:

-   Quarto and Research Transparency and Reproducibility

-   Rmarkdown basics

## Overview for today

-   Literate Programming - Weaving Code chunks with narrative text (using `knitr` )

-   Citations and Footnotes

-   Academic templates

-   Rendering to static Word document and RevealJS presentation (like this presentation!)

## Refresher: Literate Programming

> Literate Programming, introduced by Donald Knuth in the 1980s, is a programming paradigm that emphasizes the intertwining of human-readable documentation and source code.

Essentially:

-   The program is written as a coherent narrative where code segments and explanations are woven together in a way that emphasizes understanding and readability

-   The code segments ordered in a logical manner for the reader, rather than the order required by the compiler.

-   The narrative format helps to bridge the gap between the code and the theoretical framework, ensuring that the computational steps are aligned with the objectives.

-   In Quarto, this is enabled through **Code Chunks**

# Introducing: Code Chunks

## How does it look like?

An example of code chunk:

```{r}
#| label: code-chunk-example
#| echo: true
#| output: true
#| output-location: fragment

library(tidyverse)                               

diamonds %>% ggplot(aes(x = color, fill = cut)) + 
    geom_bar()
```

## Anatomy of a code chunk

For R, the code chunks are generated with the help of `knitr` package.

Each code chunk will have a list of **cell options** that looks like this if you use `source` view:

```{{r}}
#| label: fig-polar
#| echo: false
#| output: true
```

There are many code chunk options, but the important ones are:

-   `echo` - Whether to display the source code in the rendered output (true/false)

-   `output` - Whether to display the output of the code (true/false)

-   `label` - Unique label for the code chunks - useful for cross-referencing!

-   `output-location` - Location of output relative to the code that generates it (more relevant for presentations)

## Code Highlighting

::: nonincremental
-   Use `highlight-style` to specify the code highlighting style by choosing from the supported themes: a11y, arrow, atom-one, ayu, breeze, github, gruvbox

    -   The themes are "adaptive" and will automatically switch between dark and light modes based on the website's theme.

-   Use `code-line-numbers` to highlight specific lines of codes (this will make more sense for presentation, but you can also apply this to static documents)
:::

::: columns
::: {.column width="50%"}
```{{r}}
#| echo: true
#| output: false
#| code-line-numbers: "3,4"
#| highlight-style: github
#| code-overflow: wrap

library(tidyverse)

diamonds %>% ggplot(aes(x = price)) +
  geom_histogram(binwidth = 500, fill = "blue", color = "black") +
  labs(title = "Histogram of Diamond Prices", 
       x = "Price (USD)", 
       y = "Frequency")
```
:::

::: {.column width="50%"}
```{r}
#| label: code-highlighting
#| echo: true
#| output: false
#| code-line-numbers: "3,4"
#| highlight-style: github
#| code-overflow: wrap

library(tidyverse)

diamonds %>% ggplot(aes(x = price)) +
  geom_histogram(binwidth = 500, fill = "blue", color = "black") +
  labs(title = "Histogram of Diamond Prices", 
       x = "Price (USD)", 
       y = "Frequency")

```
:::
:::

## Code Annotations

::: columns
::: {.column width="70%"}
```{r}
#| label: code-annotations
#| echo: true
#| output-location: fragment

library(tidyverse)                                # <1>

diamonds %>% ggplot(aes(x = color, fill = cut)) + # <2>
    geom_bar()
```

1.  Load the `tidyverse` library
2.  Visualize the distribution of color and kind of cuts for each color
:::

::: {.column width="30%"}
-   Code blocks and executable code cells in Quarto can include line-based annotations to further explain the code and the flow of the logic to your readers.

-   Great for teaching / presentation!
:::
:::

## Anatomy of a code annotation

::: columns
::: {.column width="60%"}
Syntax (in visual editor):

![](images/code-annotation-sample.jpg){width="100%"}

Output:

![](images/code-annotation-sample-output.jpg){width="100%"}
:::

::: {.column width="40%"}
-   Each annotated line must end with a comment using the language-specific comment character for the code cell, followed by a space and the annotation number enclosed in angle brackets (e.g., `# <1>`).

-   If the annotation covers multiple lines, the same annotation number can be repeated.

-   After the code cell, provide an ordered list that details the contents of each annotation. Each item in this list should correspond to the line(s) of code marked with the same annotation number.
:::
:::

# Let's try this together!

Refer to `01-quarto-basics/04-code-chunks.qmd` for the step-by-step guide for this activity.

# Citations and Footnotes

## Citations in Quarto

By default, Quarto will use Pandoc engine to convert the in-text citations and generate the references in your document. You will need the following components:

1.  A **quarto document** formatted with in-text citations in Rmarkdown syntax (more on this later).

2.  A **bibliographic file**, e.g. BibLaTeX (.bib) or BibTeX (.bibtex) file.

3.  A **Citation Style Language (CSL) file** which specifies the formatting to use when generating the citations and bibliography (when not using natbib or biblatex to generate the bibliography).

    -   By default, Quarto will use the Chicago style. You can download additional .csl file in this CSL Project repository: <https://github.com/citation-style-language/styles>

## Bibliographic data source + CSL file

Both files have to be specified in the YAML header like so: (In this example, the `.bib` file and the `.csl` file is located in the same folder as the `.qmd` document.)

```         
---
title: "Manuscript"
bibliography: references.bib
csl: nature.csl
---
```

-   `references.bib` is the bibliographic text file. This will also be automatically generated after you include a citation in your document for the first time.

-   `nature.csl` is the citation style document, in this example is the nature citation style.

    -   You will need to download the csl file from the repository and place it in your working directory.

    -   CSL Project repository: <https://github.com/citation-style-language/styles>

## In-text citations

Common ones:

| Syntax                                                                              | Output                                                                            |
|------------------------------------|------------------------------------|
| `@katz2021` mentioned that...                                                       | @katz2021 mentioned that...                                                       |
| Katz et al. `[-@katz2021]` mentioned that...                                        | Katz et al. [-@katz2021] mentioned that...                                        |
| Software citation is good `[@katz2021, pp. 33-35]`                                  | Software citation is good [@katz2021, pp. 33-35]!                                 |
| More researchers are saying that software citation is good `[@katz2021; @park2019]` | More researchers are saying that software citation is good [@katz2021; @park2019] |

-   Insert in-text citations by typing `@` which will trigger a popup of items saved in your Zotero library.

-   Inserting citations and footnotes is generally easier in Visual editor :

    -   click on `Insert` \> `Citation`, which will bring up a popup box where you can choose your citation source!

    -   click on `Insert` \> `Footnotes` to add footnotes

## Citation Sources

Other than your Zotero library, here are the sources that you can retrieve from:

![](images/citation-sources.jpg){fig-align="center" width="600"}

## The References section

By default, Quarto will place the references section at the end of the document. You can also specify the placement by putting this section in your document (note that the example below is the `source` view on Quarto):

```         
### References

::: {#refs}
:::
```

Which will print out the output below:

![](images/references-output.jpg){width="60%"}

# Let's try this together!

Refer to `02-scholarly-writing/01-citations-references.qmd` for the step-by-step guide for this activity.

# Specific features for Scholarly Writing

## Academic Templates with Quarto Journals

::: columns
::: {.column width="70%"}
![<https://quarto.org/docs/extensions/listing-journals.html>](images/quarto-extensions.jpg){width="100%"}
:::

::: {.column width="30%"}
-   Quarto provides extensions for manuscript writing that contains styles specific for several journals/publishers, such as PLOS, ACM, JOSS, Elsevier, and more.

-   These extensions provide rich YAML metadata specifically for academic writing (often referred as "Front Matter" metadata).

-   **Let's dive into these Front Matter YAML metadata first before we explore the templates!**
:::
:::

## Front Matter

::: nonincremental
-   Scholarly articles demand extensive details in their front matter, beyond just a title and author.

-   Quarto offers a comprehensive range of YAML metadata keys to include these details.

-   This metadata covers specifying authors and their affiliations, abstract, keywords, copyright, licensing, and funding.
:::

Below is a YAML header example:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
date: 2024-07-01
author:
  - name: Bella Ratmelia
    id: br
    orcid: 0000-0003-4913-9508
    email: bellar@smu.edu.sg
    corresponding: true
    affiliation: 
      - name: Singapore Management University
        city: Singapore
        url: www.smu.edu.sg
  - name: Danping Dong
    id: dp
    orcid: 0000-0003-4913-9508
    email: bellar@smu.edu.sg
    affiliation: 
      - name: Singapore Management University
        city: Singapore
        url: www.smu.edu.sg
abstract: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
keywords:
  - Library
  - Carpentry
license: "CC BY"
copyright: 
  holder: Bella Ratmelia
  year: 2024
citation: 
  container-title: Journal of Library Carpentry
  volume: 1
  issue: 1
  doi: 10.5555/12345678
funding: "The author received no specific funding for this work."
---
```

## Author-related metadata options

The author key includes several sub-keys that offer additional details needed for scholarly articles. For example, you can add an author's affiliation, roles, email contact, and whether the author is a corresponding author.

```         
---
author:
  name: Bella Ratmelia
  orcid: 0000-0003-4913-9508
  url: https://bellaratmelia.github.io
  email: bellar@smu.edu.sg
  corresponding: true
  roles: "Conceptualization"
  affiliation: 
    - name: Singapore Management University
      department: SMU Libraries
      country: SG
      url: www.smu.edu.sg
      ror: 050qmg959
---
```

## Article-related metadata options

These metadata include things like abstract, keywords, license, copyright, and funding information.

```         
---
abstract: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
keywords:
  - Library
  - Carpentry
license: "CC BY"
copyright: 
  holder: Bella Ratmelia
  year: 2024
funding: "The author received no specific funding for this work."
---
```

## Metadata for citable articles - web article

For articles published to the web, include author, date and citation url metadata. For example:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
description: | 
  Best practices in organizing shelf space in the library
date: 2024-07-01
author:
  - name: Bella Ratmelia
    id: br
    orcid: 0000-0003-4913-9508
    email: bellar@smu.edu.sg
    corresponding: true
    affiliation: 
      - name: Singapore Management University
        city: Singapore
        url: www.smu.edu.sg
citation: true
bibliography: references.bib
---
```

## Metadata for citable articles - journal article

For journal articles, there are additional metadata that needs to be included such as volume, issue, publisher, and page numbers, like so:

```         
---
citation: 
  type: article-journal
  container-title: "Journal of Library Carpentry"
  volume: 1
  issue: 1
  doi: 10.5555/12345678
  url: https://example.com/summarizing-output
bibliography: references.bib
---  
```

## Front Matter - Rendering result in HTML

![](images/04_quarto_frontmatter.jpg){fig-align="center"}

## Info on licensing and citing

![](images/04_quarto_backmatter.jpg){fig-align="center"}

# Let's try this together!

Refer to `02-scholarly-writing/02-front-matter-metadata.qmd` for the step-by-step guide for this activity.

# Rendering to Static Documents

## Rendering to Docx

By default, Quarto will render document output to HTML. We can change it to render to Word by changing the YAML header like so:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
format:
  docx:
    toc: true
    number-sections: true
    highlight-style: github
---
```

::: callout-note
**You need to have Microsoft Word installed to be able to produce and view the Word output.**
:::

## Rendering to PDF

Similar to docx, you can change the render output to PDF by amending the YAML header like so:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    highlight-style: github
---
```

::: callout-note
Latest version of Quarto has a built-in built in PDF compilation engine, which among other things performs automatic installation of `TinyTex` and any missing TeX packages (required for LaTeX rendering)

If you encounter persistent errors when rendering to PDF, a workaround that I like to use is to render it to an HTML page, and then "print" them as PDF.
:::

::: callout-note
You can update or install TinyTex in the RStudio Terminal with this command:

`quarto install tinytex`
:::

# Let's try this together!

Amend the YAML header in your document to convert it to PDF/ Word. Does the output look different than what you expected?

# Presentation with RevealJS

## Why RevealJS (and not ppt?)

-   Not a proprietary format - it is rendered as HTML slides which you can put on GitHub if you'd like to host it online.

-   Being open-source, Reveal.js is free to use, which eliminates licensing costs associated with PowerPoint.

-   Extensive customization options through HTML, CSS, and JavaScript - and easily switch to HTML or PDF.

-   Presentations are HTML-based and can be accessed via any web browser without needing specific software.

-   Works across different operating systems and devices without compatibility issues.

-   Presentations can be designed to be responsive and accessible, ensuring they look good on any device or screen size.

-   Presentations can be hosted locally for offline access or online for easy sharing.

-   Multiple people can collaborate on a presentation using version control systems like Git and track changes made.

-   Access to a large community of developers who contribute to the project and provide support.

## Rendering to Presentation

Similar to docx and PDF, we can change the render output format to revealjs through the YAML header like so:

```         
---
title: "Habits"
author: "John Doe"
format: revealjs
---
```

::: callout-note
**Fun Fact: The slides for this workshops are created with Quarto and RevealJS!**
:::

## YAML header options for RevealJS presentations

There are many options, but several ones that you may find useful:

-   `incremental` - controls whether to show all bullet points at once, or as you progress the slides.

-   `slide-number` - controls whether to show slide numbers (will appear at the bottom right corner)

-   `theme` - Theme name, theme scss file, or a mix of both.

-   `scrollable` - controls whether to allow content that overflows slides vertically to scroll. This can also be set per-slide by including the `.scrollable` class on the slide title.

# Let's try it together!

Refer to `03-presentations/01-revealjs-presentation.qmd` for the step-by-step guide for this activity.
