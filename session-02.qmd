---
title: "Session 02 - Integrating codes"
author: "Bella Ratmelia & Dong Danping"
format:
  revealjs: 
    theme: [default, custom.scss]
    width: 1980
    height: 1080
    slide-number: true
    footer: "[C03 Making Research More Transparent with Quarto and RStudio](https://bellaratmelia.github.io/2024-fsci-quarto/)"
    incremental: true
    smaller: false
bibliography: references.bib
---

## Recap from yesterday

We covered the following topic:

-   Quarto and Research Transparency and Reproducibility

-   Rmarkdown basics

## Overview for today

-   Literate Programming - Weaving Code chunks with narrative text (using `knitr` )

-   Citations and Footnotes

-   Academic templates

-   Rendering to static Word document and RevealJS presentation (like this presentation!)

## Refresher: Literate Programming

> Literate Programming, introduced by Donald Knuth in the 1980s, is a programming paradigm that emphasizes the intertwining of human-readable documentation and source code.

Essentially:

-   The program is written as a coherent narrative where code segments and explanations are woven together in a way that emphasizes understanding and readability

-   The code segments ordered in a logical manner for the reader, rather than the order required by the compiler.

-   The narrative format helps to bridge the gap between the code and the theoretical framework, ensuring that the computational steps are aligned with the objectives.

-   In Quarto, this is enabled through **Code Chunks**

# Introducing: Code Chunks

## How does it look like?

An example of code chunk:

```{r}
#| echo: true
#| output-location: fragment

library(tidyverse)                              # <1>

diamonds %>% ggplot(aes(x = color, fill = cut)) + # <2>
    geom_bar()
```

1.  Load the `tidyverse` library
2.  Visualize the distribution of color and kind of cuts for each color

## Anatomy of a code chunk

For R, the code chunks are generated with the help of `knitr` package.

Each code chunk will have a list of **cell options** that looks like this if you use `source` view:

```{{r}}
#| label: fig-polar
#| echo: false
#| output: true
```

There are many options, but the important ones are:

-   `echo` - Whether to display the source code in the rendered output (true/false)

-   `output` - Whether to display the output of the code (true/false)

-   `label` - Unique label for the code chunks - useful for cross-referencing!

-   `output-location` - Location of output relative to the code that generates it (more relevant for presentations)

## Code Annotations

-   Code blocks and executable code cells in Quarto can include line-based annotations to further explain the code and the flow of the logic to your readers.

-   Pretty much like footnotes, but for your code chunks.

-   Great for teaching / presentation!

## Anatomy of a code annotation

````         
```r
#| echo: true
#| output-location: fragment

library(tidyverse)                                  #<1>

diamonds %>% ggplot(aes(x = color, fill = cut)) +   #<2>
    geom_bar()                                      #<2>
```
1.  load the tidyverse library for the ggplot package
2.  Visualize the distribution of color and kind of cut for each color
````

-   Each annotated line must end with a comment using the language-specific comment character for the code cell, followed by a space and the annotation number enclosed in angle brackets (e.g., `# <1>`).

-   If the annotation covers multiple lines, the same annotation number can be repeated.

-   After the code cell, provide an ordered list that details the contents of each annotation. Each item in this list should correspond to the line(s) of code marked with the same annotation number.

# Let's try this together!

Hands-on exercises to explore the cell options & code annotations

# Citations, Footnotes, and Cross-Referencing

## Citations in Quarto

By default, Quarto will use Pandoc engine to convert the in-text citations and generate the references in your document. You will need the following components:

1.  A **quarto document** formatted with in-text citations in Rmarkdown syntax (more on this later).

2.  A **bibliographic file**, e.g. BibLaTeX (.bib) or BibTeX (.bibtex) file.

3.  A **Citation Style Language (CSL) file** which specifies the formatting to use when generating the citations and bibliography (when not using natbib or biblatex to generate the bibliography).

    -   By default, Quarto will use the Chicago style. You can download additional .csl file in this CSL Project repository: <https://github.com/citation-style-language/styles>

## Bibliographic data source + CSL file

This will be specified in the YAML section of your quarto document.

```         
---
title: "Manuscript"
bibliography: references.bib
csl: nature.csl
---
```

-   `references.bib` is the bibliographic text file. This will also be automatically generated after you include a citation in your document for the first time.

-   `nature.csl` is the citation style document, in this example is the nature citation style. You will need to download the csl file from the repository and place it in your working directory. CSL Project repository: <https://github.com/citation-style-language/styles>

## The syntax for in-text citations

Common ones:

-   `@katz2021` mentioned that... --\> @katz2021 mentioned that...

-   Katz et al. `[-@katz2021]` mentioned that... --\> Katz et al. [-@katz2021] mentioned that...

-   Software citation is good `[@katz2021, pp. 33-35]` --\> Software citation is good [@katz2021, pp. 33-35]!

-   More researchers are saying that software citation is good `[@katz2021; @park2019]` --\> More researchers are saying that software citation is good [@katz2021; @park2019]

## The References section

By default, Quarto will place the references section at the end of the document. You can also specify the placement by putting this section in your document (note that the example below is the `source` view on Quarto):

```         
### References

::: {#refs}
:::
```

## References section output

### References

::: {#refs}
:::

# Let's try this together!

Let's explore citations, footnotes, and cross-referencing in Quarto.

# Specific features for Scholarly Writing

## Academic Templates with Quarto Journals

-   Quarto provides extensions for manuscript writing that contains styles specific for several journals/publishers, such as PLOS, ACM, JOSS, Elsevier, and more.

-   See here for more info: <https://quarto.org/docs/extensions/listing-journals.html> - some of the templates are contributed by the member of community.

-   These extensions provide rich YAML metadata specifically for academic writing.

-   Let's dive into these metadata first before we explore the templates!

## Front Matter

Scholarly articles demand extensive details in their front matter, beyond just a title and author. Quarto offers a comprehensive range of YAML metadata keys to include these details. This metadata covers specifying authors and their affiliations, abstract, keywords, copyright, licensing, and funding.

Below is a YAML header example:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
date: 2024-07-01
author:
  - name: Bella Ratmelia
    id: br
    orcid: 0000-0003-4913-9508
    email: bellar@smu.edu.sg
    corresponding: true
    affiliation: 
      - name: Singapore Management University
        city: Singapore
        url: www.smu.edu.sg
  - name: Danping Dong
    id: dp
    orcid: 0000-0003-4913-9508
    email: bellar@smu.edu.sg
    affiliation: 
      - name: Singapore Management University
        city: Singapore
        url: www.smu.edu.sg
abstract: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
keywords:
  - Library
  - Carpentry
license: "CC BY"
copyright: 
  holder: Bella Ratmelia
  year: 2024
citation: 
  container-title: Journal of Library Carpentry
  volume: 1
  issue: 1
  doi: 10.5555/12345678
funding: "The author received no specific funding for this work."
---
```

## Front Matter - Rendering result in HTML

![](images/04_quarto_frontmatter.jpg){fig-align="center"}

## Info on licensing and citing

![](images/04_quarto_backmatter.jpg){fig-align="center"}

# Let's try this together!

Explore the available metadata for Front Matter and the available extension for journal submissions.

# Rendering to Static Documents

## Rendering to Docx

By default, Quarto will render document output to HTML. We can change it to render to Word by changing the YAML header like so:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
format:
  docx:
    toc: true
    number-sections: true
    highlight-style: github
---
```

::: callout-note
**You need to have Microsoft Word installed to be able to produce and view the Word output.**
:::

## Rendering to PDF

Similar to docx, you can change the render output to PDF by amending the YAML header like so:

```         
---
title: "Library Carpentry: Best practices in organizing shelf space in the library"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    highlight-style: github
---
```

::: callout-note
Latest version of Quarto has a built-in built in PDF compilation engine, which among other things performs automatic installation of `TinyTex` and any missing TeX packages (required for LaTeX rendering)

If you encounter persistent errors when rendering to PDF, a workaround that I like to use is to render it to HTML page, and the "print" them as PDF.
:::

::: callout-note
You can update or install TinyTex in the RStudio Terminal with this command:

`quarto install tinytex`
:::

# Let's try this together!

Try rendering your document to word (if you have it installed) or PDF!

# Presentation with RevealJS

## Why RevealJS (and not ppt?)

-   Not a proprietary format - it is rendered as HTML slides which you can put on GitHub if you'd like to host it online.

-   Can be downloaded as PDF for easier distribution

-   Text-based using Rmarkdown - easier to edit and incorporate codes, code output, callouts, etc.

## Rendering to Presentation

Similar to docx and PDF, we can change the render output format to revealjs through the YAML header like so:

```         
---
title: "Habits"
author: "John Doe"
format: revealjs
---
```

::: callout-note
**Fun Fact: The slides for this workshops are created with Quarto and RevealJS!**
:::

## Header options for RevealJS presentations

There are many options, but several ones that you may find useful:

-   `incremental` - controls whether to show all bullet points at once, or as you progress the slides.

-   `slide-number` - controls whether to show slide numbers (will appear at the bottom right corner)

-   `theme` - Theme name, theme scss file, or a mix of both.

-   `scrollable` - controls whether to allow content that overflows slides vertically to scroll. This can also be set per-slide by including the `.scrollable` class on the slide title.

# Let's try it together!

Hands-on exercises to create and modify RevealJS presentation.
