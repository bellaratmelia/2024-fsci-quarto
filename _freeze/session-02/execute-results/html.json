{
  "hash": "fe0278717b73a25f5ab132657b07c54a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Session 02 - Integrating codes\"\nauthor: \"Bella Ratmelia & Dong Danping\"\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    width: 1980\n    height: 1080\n    slide-number: true\n    footer: \"[C03 Making Research More Transparent with Quarto and RStudio](https://bellaratmelia.github.io/2024-fsci-quarto/)\"\n---\n\n\n## Recap from yesterday\n\nWe covered the following topic:\n\n-   Quarto and Research Transparency and Reproducibility\n\n-   Rmarkdown basics\n\n## Overview for today\n\n-   Literate Programming - Weaving Code chunks with narrative text (using `knitr` )\n\n-   Citations and Footnotes\n\n-   Academic templates\n\n-   Rendering to static Word document and RevealJS presentation (like this presentation!)\n\n## Literate Programming\n\n> Literate Programming, introduced by Donald Knuth in the 1980s, is a programming paradigm that emphasizes the intertwining of human-readable documentation and source code.\n\nEssentially:\n\n-   The program is written as a coherent narrative where code segments and explanations are woven together in a way that emphasizes understanding and readability\n\n-   The code segments ordered in a logical manner for the reader, rather than the order required by the compiler.\n\n-   The narrative format helps to bridge the gap between the code and the theoretical framework, ensuring that the computational steps are aligned with the objectives.\n\n## Effect on Research Transparency & Reproducibility\n\n-   Enables researcher to provide clear, detailed descriptions of their methodologies, algorithms, and computational processes.\n\n-   This integration ensures that the logic and rationale behind each part of the code are explicitly documented, making it easier for others to follow, reproduce, and validate the research.\n\n-   Reduces ambiguities and potential misinterpretations, fostering a more robust and transparent scientific discourse.\n\nIn Quarto, this is enabled through **Code Chunks**\n\n## Introducing: Code Chunks\n\nAn example of code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)                              # <1>\n\ndiamonds %>% ggplot(aes(x = color, fill = cut)) + # <2>\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](session-02_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n1.  Load the `tidyverse` library\n2.  Visualize the distribution of color and kind of cuts for each color\n\n## Citations\n\nRStudio will detect Zotero installation and access your Zotero library\n\nOnce you cite, Quarto will create a bib file\n\nThe style is determined by the `.csl` file. You can download it from the CSL repo\n\nThere are various ways to do in-text citations\n\n## Footnotes\n\nThis is how you can add footnotes\n\nExercise: Look at a sample document, let's try to recreate this.\n\nAlternatively, if you have a working paper with Footnores, you can try to recreate yours in Quarto!\n\n## Academic Templates with Quarto Journals\n\nSee here for more info: <https://quarto.org/docs/extensions/listing-journals.html>\n\n# Rendering to Docx or PDF\n\n## Rendering to Docx\n\nSimplest way is to change the YAML\n\nOf course you have to have MS word installed.\n\n## Rendering to PDF\n\nworkaround: if you can't render it to PDF, a workaround that I like to use is to render it to HTML page, and the \"print\" them as PDF\n\n# Rendering to Presentation\n",
    "supporting": [
      "session-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}