{
  "hash": "6e1b5569ec6491940e39239c923f2134",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Session 02 - Integrating codes\"\nauthor: \"Bella Ratmelia & Dong Danping\"\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    width: 1920\n    height: 1080\n    slide-number: true\n    footer: \"[C03 Making Research More Transparent with Quarto and RStudio](https://bellaratmelia.github.io/2024-fsci-quarto/)\"\n    incremental: true\n    smaller: false\nbibliography: references.bib\nsuppress-bibliography: true\n---\n\n\n## Recap from yesterday\n\nWe covered the following topic:\n\n-   Quarto and Research Transparency and Reproducibility\n\n-   Rmarkdown basics\n\n## Overview for today\n\n-   Literate Programming - Weaving Code chunks with narrative text (using `knitr` )\n\n-   Citations and Footnotes\n\n-   Academic templates\n\n-   Rendering to static Word document and RevealJS presentation (like this presentation!)\n\n## Refresher: Literate Programming\n\n> Literate Programming, introduced by Donald Knuth in the 1980s, is a programming paradigm that emphasizes the intertwining of human-readable documentation and source code.\n\nEssentially:\n\n-   The program is written as a coherent narrative where code segments and explanations are woven together in a way that emphasizes understanding and readability\n\n-   The code segments ordered in a logical manner for the reader, rather than the order required by the compiler.\n\n-   The narrative format helps to bridge the gap between the code and the theoretical framework, ensuring that the computational steps are aligned with the objectives.\n\n-   In Quarto, this is enabled through **Code Chunks**\n\n# Introducing: Code Chunks\n\n## How does it look like?\n\nAn example of code chunk:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(tidyverse)                               \n\ndiamonds %>% ggplot(aes(x = color, fill = cut)) + \n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](session-02_files/figure-revealjs/code-chunk-example-1.png){width=960}\n:::\n:::\n\n\n## Anatomy of a code chunk\n\nFor R, the code chunks are generated with the help of `knitr` package.\n\nEach code chunk will have a list of **cell options** that looks like this if you use `source` view:\n\n```{{r}}\n#| label: fig-polar\n#| echo: false\n#| output: true\n```\n\nThere are many code chunk options, but the important ones are:\n\n-   `echo` - Whether to display the source code in the rendered output (true/false)\n\n-   `output` - Whether to display the output of the code (true/false)\n\n-   `label` - Unique label for the code chunks - useful for cross-referencing!\n\n-   `output-location` - Location of output relative to the code that generates it (more relevant for presentations)\n\n## Code Highlighting\n\n::: nonincremental\n-   Use `highlight-style` to specify the code highlighting style by choosing from the supported themes: a11y, arrow, atom-one, ayu, breeze, github, gruvbox\n\n    -   The themes are \"adaptive\" and will automatically switch between dark and light modes based on the website's theme.\n\n-   Use `code-line-numbers` to highlight specific lines of codes (this will make more sense for presentation, but you can also apply this to static documents)\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n```{{r}}\n#| echo: true\n#| output: false\n#| code-line-numbers: \"3,4\"\n#| highlight-style: github\n#| code-overflow: wrap\n\nlibrary(tidyverse)\n\ndiamonds %>% ggplot(aes(x = price)) +\n  geom_histogram(binwidth = 500, fill = \"blue\", color = \"black\") +\n  labs(title = \"Histogram of Diamond Prices\", \n       x = \"Price (USD)\", \n       y = \"Frequency\")\n```\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell highlight-style='github'}\n\n```{.r .cell-code .code-overflow-wrap  code-line-numbers=\"3,4\"}\nlibrary(tidyverse)\n\ndiamonds %>% ggplot(aes(x = price)) +\n  geom_histogram(binwidth = 500, fill = \"blue\", color = \"black\") +\n  labs(title = \"Histogram of Diamond Prices\", \n       x = \"Price (USD)\", \n       y = \"Frequency\")\n```\n:::\n\n:::\n:::\n\n## Code Annotations\n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(tidyverse)                                # <1>\n\ndiamonds %>% ggplot(aes(x = color, fill = cut)) + # <2>\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](session-02_files/figure-revealjs/code-annotations-1.png){width=960}\n:::\n:::\n\n\n1.  Load the `tidyverse` library\n2.  Visualize the distribution of color and kind of cuts for each color\n:::\n\n::: {.column width=\"30%\"}\n\n-   Code blocks and executable code cells in Quarto can include line-based annotations to further explain the code and the flow of the logic to your readers.\n\n-   Great for teaching / presentation!\n:::\n\n::::\n\n\n## Anatomy of a code annotation\n\n::: columns\n::: {.column width=\"60%\"}\nSyntax (in visual editor):\n\n![](images/code-annotation-sample.jpg){width=\"100%\"}\n\nOutput:\n\n![](images/code-annotation-sample-output.jpg){width=\"100%\"}\n:::\n\n::: {.column width=\"40%\"}\n-   Each annotated line must end with a comment using the language-specific comment character for the code cell, followed by a space and the annotation number enclosed in angle brackets (e.g., `# <1>`).\n\n-   If the annotation covers multiple lines, the same annotation number can be repeated.\n\n-   After the code cell, provide an ordered list that details the contents of each annotation. Each item in this list should correspond to the line(s) of code marked with the same annotation number.\n:::\n:::\n\n# Let's try this together!\n\nRefer to `01-quarto-basics/code-chunks.qmd` for the step-by-step guide for this activity.\n\n# Citations and Footnotes\n\n## Citations in Quarto\n\nBy default, Quarto will use Pandoc engine to convert the in-text citations and generate the references in your document. You will need the following components:\n\n1.  A **quarto document** formatted with in-text citations in Rmarkdown syntax (more on this later).\n\n2.  A **bibliographic file**, e.g. BibLaTeX (.bib) or BibTeX (.bibtex) file.\n\n3.  A **Citation Style Language (CSL) file** which specifies the formatting to use when generating the citations and bibliography (when not using natbib or biblatex to generate the bibliography).\n\n    -   By default, Quarto will use the Chicago style. You can download additional .csl file in this CSL Project repository: <https://github.com/citation-style-language/styles>\n\n## Bibliographic data source + CSL file\n\nBoth files have to be specified in the YAML header like so: (In this example, the `.bib` file and the `.csl` file is located in the same folder as the `.qmd` document.)\n\n```         \n---\ntitle: \"Manuscript\"\nbibliography: references.bib\ncsl: nature.csl\n---\n```\n\n-   `references.bib` is the bibliographic text file. This will also be automatically generated after you include a citation in your document for the first time.\n\n-   `nature.csl` is the citation style document, in this example is the nature citation style.\n\n    -   You will need to download the csl file from the repository and place it in your working directory.\n\n    -   CSL Project repository: <https://github.com/citation-style-language/styles>\n\n## In-text citations\n\nCommon ones:\n\n| Syntax                                                                              | Output                                                                            |\n|------------------------------------|------------------------------------|\n| `@katz2021` mentioned that...                                                       | @katz2021 mentioned that...                                                       |\n| Katz et al. `[-@katz2021]` mentioned that...                                        | Katz et al. [-@katz2021] mentioned that...                                        |\n| Software citation is good `[@katz2021, pp. 33-35]`                                  | Software citation is good [@katz2021, pp. 33-35]!                                 |\n| More researchers are saying that software citation is good `[@katz2021; @park2019]` | More researchers are saying that software citation is good [@katz2021; @park2019] |\n\n-   Insert in-text citations by typing `@` which will trigger a popup of items saved in your Zotero library.\n\n-   Alternatively, if you are using visual editor, click on `Insert` \\> `Citation`, which will bring up a popup box where you can choose your citation source!\n\n## Citation Sources\n\nOther than your Zotero library, here are the sources that you can retrieve from:\n\n![](images/citation-sources.jpg){fig-align=\"center\" width=\"600\"}\n\n## The References section\n\nBy default, Quarto will place the references section at the end of the document. You can also specify the placement by putting this section in your document (note that the example below is the `source` view on Quarto):\n\n```         \n### References\n\n::: {#refs}\n:::\n```\n\nWhich will print out the output below:\n\n![](images/references-output.jpg){width=\"60%\"}\n\n# Let's try this together!\n\nRefer to `02-scholarly-writing/citations-references.qmd` for the step-by-step guide for this activity.\n\n# Specific features for Scholarly Writing\n\n## Academic Templates with Quarto Journals\n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\n![<https://quarto.org/docs/extensions/listing-journals.html>](images/quarto-extensions.jpg){width=\"100%\"}\n:::\n\n::: {.column width=\"30%\"}\n-   Quarto provides extensions for manuscript writing that contains styles specific for several journals/publishers, such as PLOS, ACM, JOSS, Elsevier, and more.\n\n-   These extensions provide rich YAML metadata specifically for academic writing (often referred as \"Front Matter\" metadata).\n\n-   **Let's dive into these Front Matter YAML metadata first before we explore the templates!**\n\n:::\n\n::::\n\n\n\n\n## Front Matter\n\n:::{.nonincremental}\n-   Scholarly articles demand extensive details in their front matter, beyond just a title and author. \n\n-   Quarto offers a comprehensive range of YAML metadata keys to include these details. \n\n-   This metadata covers specifying authors and their affiliations, abstract, keywords, copyright, licensing, and funding.\n:::\n\nBelow is a YAML header example:\n\n```\n---\ntitle: \"Library Carpentry: Best practices in organizing shelf space in the library\"\ndate: 2024-07-01\nauthor:\n  - name: Bella Ratmelia\n    id: br\n    orcid: 0000-0003-4913-9508\n    email: bellar@smu.edu.sg\n    corresponding: true\n    affiliation: \n      - name: Singapore Management University\n        city: Singapore\n        url: www.smu.edu.sg\n  - name: Danping Dong\n    id: dp\n    orcid: 0000-0003-4913-9508\n    email: bellar@smu.edu.sg\n    affiliation: \n      - name: Singapore Management University\n        city: Singapore\n        url: www.smu.edu.sg\nabstract: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nkeywords:\n  - Library\n  - Carpentry\nlicense: \"CC BY\"\ncopyright: \n  holder: Bella Ratmelia\n  year: 2024\ncitation: \n  container-title: Journal of Library Carpentry\n  volume: 1\n  issue: 1\n  doi: 10.5555/12345678\nfunding: \"The author received no specific funding for this work.\"\n---\n```\n## Author-related metadata options\nThe author key includes several sub-keys that offer additional details needed for scholarly articles. For example, you can add an author's affiliation, roles, email contact, and whether the author is a corresponding author.\n\n```\n---\nauthor:\n  name: Bella Ratmelia\n  orcid: 0000-0003-4913-9508\n  url: https://bellaratmelia.github.io\n  email: bellar@smu.edu.sg\n  corresponding: true\n  roles: \"Conceptualization\"\n  affiliation: \n    - name: Singapore Management University\n      department: SMU Libraries\n      country: SG\n      url: www.smu.edu.sg\n      ror: 050qmg959\n---\n```\n\n## Article-related metadata options\nThese metadata include things like abstract, keywords, license, copyright, and funding information. \n\n```\n---\nabstract: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nkeywords:\n  - Library\n  - Carpentry\nlicense: \"CC BY\"\ncopyright: \n  holder: Bella Ratmelia\n  year: 2024\nfunding: \"The author received no specific funding for this work.\"\n---\n```\n\n## Metadata for citable articles - web article\n\nFor articles published to the web, include author, date and citation url metadata. For example:\n\n```\n---\ntitle: \"Library Carpentry: Best practices in organizing shelf space in the library\"\ndescription: | \n  Best practices in organizing shelf space in the library\ndate: 2024-07-01\nauthor:\n  - name: Bella Ratmelia\n    id: br\n    orcid: 0000-0003-4913-9508\n    email: bellar@smu.edu.sg\n    corresponding: true\n    affiliation: \n      - name: Singapore Management University\n        city: Singapore\n        url: www.smu.edu.sg\ncitation: true\nbibliography: references.bib\n---\n```\n\n\n## Metadata for citable articles - journal article\nFor journal articles, there are additional metadata that needs to be included such as volume, issue, publisher, and page numbers, like so:\n\n```\n---\ncitation: \n  type: article-journal\n  container-title: \"Journal of Library Carpentry\"\n  volume: 1\n  issue: 1\n  doi: 10.5555/12345678\n  url: https://example.com/summarizing-output\nbibliography: references.bib\n---  \n```\n\n## Front Matter - Rendering result in HTML\n\n![](images/04_quarto_frontmatter.jpg){fig-align=\"center\"}\n\n## Info on licensing and citing\n\n![](images/04_quarto_backmatter.jpg){fig-align=\"center\"}\n\n# Let's try this together!\n\nRefer to `02-scholarly-writing/front-matter-metadata.qmd` for the step-by-step guide for this activity.\n\n# Rendering to Static Documents\n\n## Rendering to Docx\n\nBy default, Quarto will render document output to HTML. We can change it to render to Word by changing the YAML header like so:\n\n```         \n---\ntitle: \"Library Carpentry: Best practices in organizing shelf space in the library\"\nformat:\n  docx:\n    toc: true\n    number-sections: true\n    highlight-style: github\n---\n```\n\n::: callout-note\n**You need to have Microsoft Word installed to be able to produce and view the Word output.**\n:::\n\n## Rendering to PDF\n\nSimilar to docx, you can change the render output to PDF by amending the YAML header like so:\n\n```         \n---\ntitle: \"Library Carpentry: Best practices in organizing shelf space in the library\"\nformat:\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n    highlight-style: github\n---\n```\n\n::: callout-note\nLatest version of Quarto has a built-in built in PDF compilation engine, which among other things performs automatic installation of `TinyTex` and any missing TeX packages (required for LaTeX rendering)\n\nIf you encounter persistent errors when rendering to PDF, a workaround that I like to use is to render it to an HTML page, and then \"print\" them as PDF.\n:::\n\n::: callout-note\nYou can update or install TinyTex in the RStudio Terminal with this command:\n\n`quarto install tinytex`\n:::\n\n# Let's try this together!\n\nAmend the YAML header in your document to convert it to PDF/ Word. Does the output look different than what you expected?\n\n# Presentation with RevealJS\n\n## Why RevealJS (and not ppt?)\n\n-   Not a proprietary format - it is rendered as HTML slides which you can put on GitHub if you'd like to host it online.\n\n-   Can be downloaded as PDF for easier distribution\n\n-   Text-based using Rmarkdown - easier to edit and incorporate codes, code output, callouts, etc.\n\n## Rendering to Presentation\n\nSimilar to docx and PDF, we can change the render output format to revealjs through the YAML header like so:\n\n```         \n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\nformat: revealjs\n---\n```\n\n::: callout-note\n**Fun Fact: The slides for this workshops are created with Quarto and RevealJS!**\n:::\n\n## YAML header options for RevealJS presentations\n\nThere are many options, but several ones that you may find useful:\n\n-   `incremental` - controls whether to show all bullet points at once, or as you progress the slides.\n\n-   `slide-number` - controls whether to show slide numbers (will appear at the bottom right corner)\n\n-   `theme` - Theme name, theme scss file, or a mix of both.\n\n-   `scrollable` - controls whether to allow content that overflows slides vertically to scroll. This can also be set per-slide by including the `.scrollable` class on the slide title.\n\n# Let's try it together!\n\nRefer to `03-presentations/revealjs-presentation.qmd` for the step-by-step guide for this activity.\n",
    "supporting": [
      "session-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}